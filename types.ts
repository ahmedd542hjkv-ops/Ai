/**
 * types.ts
 *
 * This file defines the core TypeScript interfaces and types used throughout the application.
 * These types ensure data consistency and provide static type checking for props, state,
 * and API responses, making the codebase more robust and maintainable.
 */

// Represents the available fonts for customization in the settings.
export interface Font {
  name: string;
  className: string;
}

// Defines the structure of a color theme, including various shades for UI elements.
export interface ColorTheme {
  name: string;
  primary: string; // Main background for components like AI messages.
  secondary: string; // Secondary background for sidebars, inputs, etc.
  accent: string; // Highlight color for buttons, selections, and user messages.
  text: string; // Primary text color.
  icon: string; // Color for icons.
  bg: string; // Overall application background color.
  primaryContent: string; // Text color for elements on a 'primary' background.
  secondaryContent: string; // Subtler text color for descriptions or secondary info.
}

// Encapsulates all user-configurable settings.
export interface Settings {
  theme: 'light' | 'dark'; // The overall UI theme.
  colorTheme: ColorTheme; // The selected color palette.
  font: Font; // The selected font family.
  fontSize: number; // The base font size in pixels.
  systemPrompt: string; // Custom instructions for the AI's personality.
  useSearch: boolean; // Global toggle for enabling web search grounding.
}

// Defines the possible roles in a conversation.
export type Role = 'user' | 'model';

/**
 * Represents a file that has been uploaded by the user or generated by the model.
 * This is used for both the staging area before sending and for displaying in the message history.
 */
export interface UploadedFile {
  id: string;
  name: string;
  type: string; // MIME type (e.g., 'image/png').
  size: number; // File size in bytes.
  data: string; // Base64 encoded data URI.
  description: string; // User-provided description or model-generated caption.
}

// Represents a single message within a conversation.
export interface Message {
  id: string;
  role: Role;
  text: string;
  timestamp: Date;
  groundingChunks?: GroundingChunk[]; // Web search results, if any.
  files?: UploadedFile[]; // Attached files or generated images.
}

// Represents a full conversation, including its metadata and all messages.
export interface Conversation {
  id: string;
  title: string;
  messages: Message[];
  createdAt: Date;
}

/**
 * Defines the structure for a web search result chunk from the Gemini API.
 * The `web` property is optional to align with the library's type definitions.
 */
export interface GroundingChunk {
    web?: {
        uri?: string;
        title?: string;
    }
}

/**
 * Defines the different modes for sending a message. This allows for special actions
 * like forcing a web search, generating an image, or getting a faster response.
 */
export type SendMode = 'default' | 'no-thinking' | 'search' | 'image';
